@page "/activity/create/{Id:guid?}"

@using BGS.Data
@using BGS.Data.Entities
@using Microsoft.EntityFrameworkCore
@inject DataSynchronizer DataSynchronizer
@implements IDisposable

<PageTitle>Activity - Create</PageTitle>

@if (db is not null)
{
    @* Create activity entry form *@

    <EditForm Model="@activity" OnValidSubmit="@HandleValidActivitySubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label>
                Name:
                <InputText @bind-Value="activity.Name" />
            </label>
        </p>
        <p>
            <label>
                Date:
                <InputDate @bind-Value="activity.Date" />
            </label>
        </p>
        <p>
            <label>
                Time start:
                @*<input type="time" @bind-Value="activity.Start" />*@

                <input type="time" min="0" max="600" @bind-value="@TimeProxy" />

                @functions
                {
            DateTime TimeProxy
        {
                get
                {
                    if (activity.Start != null)
                    {
                        DateTime h = activity.Date.ToDateTime((TimeOnly)activity.Start);
                        return h;
                    }
                    else
                    {
                        return activity.Date.ToDateTime(new TimeOnly(0, 0));
                    }
                }

                set
                {
                    activity.Start = TimeOnly.FromTimeSpan(value.TimeOfDay);
                }
        }
            }
        </label>
    </p>
    <p>
        <label>
            Duration (Minutes):
            <InputNumber @bind-Value="activity.DurationInMinutes" />
        </label>
    </p>
    <p>
        <label>
            Stop time:
            <input type="button" value="Stop time" @onclick="CalculateDuration" />

            @{
                    void CalculateDuration()
                    {
                        if (activity.Start != null)
                        {
                            activity.DurationInMinutes = (int)(DateTime.Now.TimeOfDay - activity.Start.Value.ToTimeSpan()).TotalMinutes;
                        }
                    }
                }

            </label>
        </p>

        <p>
            <label>
                Place:
                <InputText @bind-Value="activity.Place" />
            </label>
        </p>

        @* Player list *@
        <input type="button" value="Add player" @onclick="AddPlayer" />

        @{
            void AddPlayer()
            {
                activity.Players.Add(new Player());

            }
        }

        @foreach (var p in activity.Players)
        {
            <p>
                <label>
                    Playername:
                    <InputText @bind-Value="p.Name" />
                </label>
                <label>
                    Points:
                    <InputNumber @bind-Value="p.Points" />
                </label>
                <label>
                    Ranking:
                    <InputNumber @bind-Value="p.Ranking" />
                </label>
                <label>
                    <input type="button" value="x" @onclick="() => RemovePlayer(p)" />

                    @{
            void RemovePlayer(Player p)
            {
                activity.Players.Remove(p);
            }
        }
                </label>
            </p>
        }

        <button type="submit">Submit</button>
    </EditForm>


}

@code {

    //if edit, this is the id of the record
    [Parameter] public Guid? Id { get; set; }

    ClientSideDbContext? db;

    Activity activity = new Activity();

    protected override async Task OnInitializedAsync()
    {
        db = await DataSynchronizer.GetPreparedDbContextAsync();
        DataSynchronizer.OnUpdate += StateHasChanged;

        //Check if edit or create
        if(Id == null || Id == Guid.Empty)
        {
            //add 1 player
            activity.Players.Add(new Player());
        }
        else
        {
            //get record and set activity
            activity = db.Activities.Include("Players").Where(x => x.Id == Id).FirstOrDefault() ?? new Activity();
        }
    }

    public void Dispose()
    {
        db?.Dispose();
        DataSynchronizer.OnUpdate -= StateHasChanged;
    }

    private void HandleValidActivitySubmit()
    {
        //Logger.LogInformation("HandleValidSubmit called");

        if (db == null)
            return;

        // Process the valid form
        try
        {
            if (Id == null || Id == Guid.Empty)
            {

                db.Activities.Add(activity);


            }
            else
            {
                //Update

                //check players
                if(activity.Players != null)
                {
                    foreach(var p in activity.Players)
                    {
                        var currentPlayer = db.Players.Where(x => x.Id == p.Id).FirstOrDefault();

                        if(currentPlayer == null)
                        {
                            //add player
                            db.Players.Add(p);
                        }
                        else
                        {
                            //update
                            db.Players.Update(p);
                        }
                    }
                    db.SaveChanges();
                }

                //activity.Players = null;
                db.Activities.Update(activity);
            }
            db.SaveChanges();

            //TODO show success message

            //create new object
            activity = new Activity();
        }
        catch (Exception ex)
        {

        }

    }
}
