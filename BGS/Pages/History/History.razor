@page "/activity/history"
@using BGS.Data.Entities
@using Microsoft.EntityFrameworkCore
@using QuickGrid
@using BGS.Data
@using System.Data.Common
@inject DataSynchronizer DataSynchronizer
@implements IDisposable

<PageTitle>History</PageTitle>
@*<SyncStatus />*@
@*<PartDetails Part="selectedPart" OnHide="@(() => { selectedPart = null; })" />*@

@if (db is not null)
{
    <div>
        <button @onclick="AddSomethingAsync">
            Add something
        </button>
    </div>

    <div class="inventory-grid">
        <Grid Virtualize="true" Items="@GetFilteredParts()" ItemKey="@(x => x.Id)" ItemSize="35">

             <PropertyColumn Title="Name" Property="@(x => x.Name)" Class="col-location" />

             @*<TemplateColumn Title="Name" SortBy="@(items => items.SortByAscending(x => x.Name).ThenAscending(x => x.Date))" Class="col-category">
                <ChildContent>@context.Name / @context.Date</ChildContent>
               <ColumnOptions>
                    <p>Category (@categories.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="categories" @onclick="@(() => subcategories = Array.Empty<string>())">
                        @foreach (var name in db.Parts.Select(x => x.Category).Distinct())
                            {
                            <option>@name</option>
                            }
                    </select>

                    <p>Subcategory (@subcategories.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="subcategories">
                        @foreach (var name in db.Parts.Where(x => categories.Contains(x.Category)).Select(x => x.SubCategory).Distinct())
                            {
                            <option>@name</option>
                            }
                    </select>

                    <div><button class="bg-gray-200 px-5 py-1 mb-2" @onclick="@(() => { categories = Array.Empty<string>(); subcategories = Array.Empty<string>(); })">Reset</button></div>
                </ColumnOptions>
            </TemplateColumn>*@

            <PropertyColumn Title="Date" Property="@(x => x.Date)" Class="col-name" OnCellClicked="@((Activity part) => { selectedPart = part; })">
                <ColumnOptions>
                    <input @bind="searchName" @bind:event="oninput" type="search" placeholder="Search..." />
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Title="Place" Property="@(x => x.Place)" Class="col-location" />

                <PropertyColumn Title="Start" Property="@(x => x.Start)" Class="col-location" />
                    <PropertyColumn Title="Duration" Property="@(x => x.Duration)" Class="col-location" />


            @*<PropertyColumn Title="Player" Property="@(x => x.Players)" Class="col-location" />*@

                <TemplateColumn Title="Player" Class="col-category">
                <ChildContent>@string.Join(", ",context.Players.Select(x => x.Name).ToList())</ChildContent>
                </TemplateColumn>
                

           @* <PropertyColumn Title="Stock" Property="@(x => x.Stock)" Format="N0" Align="Align.Right" Class="col-stock">
                <ColumnOptions>
                    <p>Min stock</p>
                    <input type="range" @bind="minStock" @bind:event="oninput" min="0" max="50000" />
                    <p>Max stock</p>
                    <input type="range" @bind="maxStock" @bind:event="oninput" min="0" max="50000" />
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Title="Cost ($)" Property="@(x => x.PriceCents/100)" Format="N0" Align="Align.Right" Class="col-cost" />*@

        </Grid>
        <div class="status-bar">
            Showing @GetFilteredParts()?.Count().ToString("N0") items
        </div>
    </div>
}

@code {
    ClientSideDbContext? db;

    [Parameter] public string? SearchName { get; set; }

    string[] categories = Array.Empty<string>();
    string[] subcategories = Array.Empty<string>();
    string searchName = string.Empty;
    int minStock, maxStock = 50000;
    Activity? selectedPart;

    IQueryable<Activity>? GetFilteredParts()
    {
        if (db is null)
        {
            return null;
        }

        var result = db.Activities.Include("Players").AsNoTracking().AsQueryable();
        //if (categories.Any())
        //{
        //    result = result.Where(x => categories.Contains(x.Category));
        //}
        //if (subcategories.Any())
        //{
        //    result = result.Where(x => subcategories.Contains(x.SubCategory));
        //}
        //if (!string.IsNullOrEmpty(searchName))
        //{
        //    result = result.Where(x => EF.Functions.Like(x.Name, searchName.Replace("%", "\\%") + "%", "\\"));
        //}
        //if (minStock > 0)
        //{
        //    result = result.Where(x => x.Stock >= minStock);
        //}
        //if (maxStock < 50000)
        //{
        //    result = result.Where(x => x.Stock <= maxStock);
        //}

        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        db = await DataSynchronizer.GetPreparedDbContextAsync();
        DataSynchronizer.OnUpdate += StateHasChanged;

        //DataSynchronizer.GetPreparedDbContextAsync
    }

    private static Random random = new Random();

    public static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    protected async Task AddSomethingAsync()
    {
        if (db is null)
        {
            return;
        }

        try
        {


            var connection = db.Database.GetDbConnection();
            connection.Open();

            List<Activity> dummyParts = new List<Activity>();

            dummyParts.Add(new Activity()
                {
                    Id = Guid.NewGuid(),
                    Date = DateOnly.FromDateTime(DateTime.Now),
                    Name = RandomString(10),
                    Start = TimeOnly.FromDateTime(DateTime.Now),
                    Duration = TimeSpan.FromMinutes(90),
                    Place = "@Home"
                });

            BulkInsert(connection, dummyParts);

        }
        catch (Exception ex)
        {
            // TODO: use logger also

        }

    }

    private void BulkInsert(DbConnection connection, IEnumerable<Activity> parts)
    {
        // Since we're inserting so much data, we can save a huge amount of time by dropping down below EF Core and
        // using the fastest bulk insertion technique for Sqlite.
        using (var transaction = connection.BeginTransaction())
        {
            var command = connection.CreateCommand();
            var id = AddNamedParameter(command, "$Id");
            var date = AddNamedParameter(command, "$Date");
            var name = AddNamedParameter(command, "$Name");
            var start = AddNamedParameter(command, "$Start");
            var end = AddNamedParameter(command, "$Duration");
            var place = AddNamedParameter(command, "$Place");

            command.CommandText =
                $"INSERT INTO Activities (Id, Date, Name, Start, Duration, Place) " +
                $"VALUES ({id.ParameterName}, {date.ParameterName}, {name.ParameterName}, {start.ParameterName}, {end.ParameterName}, {place.ParameterName})";

            foreach (var part in parts)
            {
                id.Value = part.Id;
                date.Value = part.Date;
                name.Value = part.Name;
                start.Value = part.Start;
                end.Value = part.Duration;
                place.Value = part.Place;
                command.ExecuteNonQuery();
            }

            transaction.Commit();
        }

        static DbParameter AddNamedParameter(DbCommand command, string name)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }

    protected override void OnParametersSet()
    {
        searchName = SearchName ?? string.Empty;
    }

    public void Dispose()
    {
        db?.Dispose();
        DataSynchronizer.OnUpdate -= StateHasChanged;
    }
}
